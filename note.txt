npm run dev      //runs the app on localhost 3000

* public -- folder (for images and stylesheet, etc) is your static folder, means anything you put here  is going to be directly accesible from the browser.

* styles -- there is a so many different ways to write CSS in Next.
  -- global.scc   - for entire app. IMPORTANT!!! You CAN'T import global stylesheet directly into components, only with .module.css extention css files.
  --Home.modules.css  -- this CSS rules applies only to the Home page.
  ** That's the recommended way, to have a specific CSS file for your different components or pages, and import them into the page belongs the CSS.

* index.js   -- inside the 'pages' folder is our Home page.
import Head from "next/head";   // this is usaed dor custom titles or meta tags, keywords, descriptions things like that.

*  -app.js    -- this is the file where all you pages components wrapped. And where you have imported global styles. Here you can import and use Layout, Navbar, Footer components, that you want to have for every page.and these components have tpo wrap children/ or page components(as the about, contant pages)

for all your components that are not pages(like Layout, Footer, Navbar ect), you can create a folder named 'components'
inside the root project folder.

RECOMMENDED to use uppercase for components name file, for pages lowercase name file.

In the Next the cool thing is you don't need a 3-party router , and define routes. You simple put your pages inside the 'pages' folder.
the Next is very good for SEO(search engine) crawlers, because the app with Next will display every element with its content in the source code, which with React created app you are not gonna see the source code, there is only one, element with 'root' id.

**  import styles from '../styles/Layout.modules.css'     
// to apply the stylesheet for specific component import it.


**  import Link from "next/link";
//takes href='/' prop where you show route path for the page you want to link.

** Conditional style with JSX : 
export default function Header() {
  const x = 2;
   return(
     ...
     <div className='title'>...</div>
      <style jsx>
        {`
          .title {
            color: ${x > 3 ? "red" : "green"};
          }
        `}
      </style>
      ...
   );

**  To add a lang attribute to HTML tag, we can create a custom document.
A custom Document can update the <html> and <body> tags used to render a Page. This file is only rendered on the server, so event handlers like onClick cannot be used in _document.

To override the default Document, create the file pages/_document.js as shown below:

import { Html, Head, Main, NextScript } from 'next/document'   /import 


copy and pass below code to the _document.js 

export default function Document() {
  return (
    <Html>
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}

then, can add <Html lang="en"> like so, so you can pass attributes in as props to html if you need to. BUT better adding via  <meta> tag within the <Head> component in index.js.
example:
<meta name="keywords" content="web development, programming " />

_________-Data Fetching_____________
there are some special functions that we can use to fetch data and then pass it into our page as props. We will work on index.js our home page for that, since it's the root component. we need to add these functions above or below the component.

### There are 3 separate methods we can use to fetch data:

1. getStaticProps()   which is going to allow us to fetch it build-time;
2. getServerSideProps()  where we can fetch the data on every request, which is little slower;
3. getStaticPaths()   to dynamically generate path pased on the data we're fetching.

we gonna use getStaticProps().
** the one way to fetch API from a 3-d party api, called Jsonplaceholder.
** the second way fetch API fom local, create own api routes in the api file.

-------fetching data from Jsonplaceholder-----------
https://jsonplaceholder.typicode.com/posts_limit=6 
'_limit=6' -- this things at the end of the endpoint is for defining the limit for the blogs number, we need only 6 blogs
the cool thing how  getStaticProps() works, we can return an object with props which is an object and then whatever we want to pass in  as props, in our case it's articleswe fetch.
like: 
export const getStaticProps = async () => {
  const res = await fetch("https://jsonplaceholder.typicode.com/posts?_limit=6");
  const articles = await res.json();
  return {
    props: {
      articles,
    },
  };
};

then pass the props to the component and use it, like: 
export default function Home({ articles }) {...}

**   <Link href="/article/[id]" as={`/article/${article.id}`}>  we used in the <ArticleItem> component to set the link fro each individual id path by the id of item
this '&rarr;' elements to insert -> the arrow faced to the right, it's inside the <ArticleItem>

** How to display the id number as <ArticleItem> content.
example: 
import { useRouter } from "next/router";

function Article() {
  const router = useRouter();
  const { id } = router.query;
  return <div>This is an article {id}</div>;
}
export default Article;


-------fetch the data at the time of request  - getServerSideProps() -----------
we can use getServerSideProps() to dynamically generate the paths with all of the ata for eaach article only at the time of request.
These getServerSideProps() and getStaticProps() can get passed in a context, and that allows us actually get the id of whatever is in the URL.
like: 
`https://jsonplaceholder.typicode.com/posts${context.params.id}`
that's it !!!!!!!!

---------- getStaticPaths & getStaticProps (The best practice) ------------
You can use combination of to getStaticPaths & getStaticProps generate the dynamic the path with the data 
When you change getServerSideProps async() fetch function to getStaticProps(), you will get error, that says getStaticPaths is required for dynamic SSG...(SSG for Static Side Generated)
Doing it this way gonna make it much faster, because it fecth at build-time and you can use it in a static website.
1) change getServerSideProps () to getStaticProps()
2) create a nd export const getStaticPaths() async fetch function to get collection of articles.
and : return {paths: {params: {id: '1', id: '2'}}}, for that we can write two lines of code, like: 
const ids = articles.map(article => aricle.id);  to get the array of ids, then   --->
const paths = ids.map(id => ({params: {id: id.toString()}}))
<----- tu turn the ids to string. and return the 'paths'.
and in return add 'fallback: false' which means if we go something that you know doesn't exist in the data it's going to return 404-page, 
return {
    paths,
    fallback: false 
}
that's it!!!
now when you click on article, it's gonna show the each individial article, it's path in the URL bar, and if you manually add the higher number that 6(since we defined limit number of articles to 6 and you see only 6 article displayed), however  if we get the article for the path 'article/20', for example if you set to 20. What happened is it generated all the paths for all the articles at build-time. 

-----------Export a Static Website------
Now we gonna  generate a static website using what we've created up here.
1) got ot the package.json file and change "build": "next build" to "build": "next build && next export". We do that, because when we run 'next build' it builds for production we deploy everything, however when we do 'next export' it goes into a folder called 'out' and it is a static website.
2) then, stop the server and run 'npm run build'. It's gonna build for production and it's gonna also export a static website. And you can seee the new folder 'out'.
Now we could upload all of this to any host(to Versel, example), that would know how to handle node.js.

---OUT folder or a Static website-----
The 'out' folder, which is a completele static website. You wan to run this on some kinda server, cdn or whatever. We gonna use the 'serve' package.
to install it  --> 
npm i -g serve
to run the 'serve', run command:
serve -s out -p 8000
now it should be serving our static website on the port we defined.
Now we have our static website in folder 'out', and we delete everything except this 'out' folder, the website still gonna work. And you can see how fast you can open pages or articles.
If you deploy to a server, this 'out' folder gonna be ignored, this file is in the list of '.gitignore' file, you can see it there. And the website can work withour the static website, means if you dlete this 'out' folder, you still can deploy your app, and everything gonna work fine.


---------API ROUTES-----------------
in 'api' folder we have the 'hello.js' file, where the a function that takes in a request and response, and we can response with a sepcific statuc code and we can response with a specific data  -->>
export default function handler(req, res) {
  res.status(200).json({ name: 'John Doe' })
}
if you ever worked with express this is gonna look really familiar.
Now, we can delete this 'hello.js' file, and create our own folder 'articles' inside the api folder, and create 'index.js' file inside 'articles'.
For every response, or every function we gonna have separate file, in this project we gonna have 2 , one to get all articles and one to get a single article. So far as where the data comes from, that could be from anywhere(expamle from Postman) and you can make database calls in here.  For now we gonna use some JS file data 'data.js', which we will use for getting data.
** START
* To get all of our articles.
1) import {articles} from '../../../data'    //import the data from the data.js
2) to serve the 'articles' from our api.
export default function handler(req, res) {
  res.status(200).json(articles)
}
Now when you carete something inside this 'api' folder, it gonna be accesible automatically from api/articles (since we called our resource 'articles' ), you see you the data on this path, we can then fetch and do what we want with. Now this data comes from a local file, but it could be from anywhere. 


* To get a sinlge article.
create another file inside this 'api/articles' called [id].js
1) we can copy the 'import' from the index.js and pass them into [id].js, beacuse we're using the same data. We want to be able to go to localhost 'api/articles/id' and get the data for tha specific id. And the way we can access that with request. Here we using destructure it since that's the only thing we're using up here.
---> {query: {id}}
How we have access to the id variable.
2) we want filder aout that specific article that we want by that id --->
const filtered = articles.filter((article) => article.id === id);
3) the we check if the filtered.id is greater that 0,  then send res.statuc with statuc of OK. and pass the json with filtered array and specify 0 index for the first item in this array., like --> 
 if(filtered.length > 0 ) {
    res.statuc(200).json(filtered[0])
  }
and for else pass the res.status(404) and the json with message, ----> 
else {
    res.status(404).json({ message: `The article with ${id} is not found` });
    Now we got the info for a single article.
    That's it here.
Now we can use it in our application


------------Use API data for our APPlication-------------
in index.js for our application, which is in the pages folder.
do some changes  to the getStaticProps() async function,  so it can fetch from our API.
Pass copy and change it.
1) we need to use absolute URL(with http or https), to fetch the data from our API, even though it's on the same project root folder.
2) create 'config' folder in the project  root folder and create 'index.js' in there . 
----> 
const dev = process.env.NODE_ENV !== "production";

export const server = dev ? "http://localhost:3000" : "https://yourwebsite.com";

add the code above. 
3) Nowe back in index.js (for app page) import this 'server', that we just created in config.
import { server } from "../config";
4) instead of fetching the data from the jsonplaceholder, we can fetch the data through our API,by adding 'server' variable, where we store the absolute path.
5) if you go to the website you can see that the content(data) on the home page(or index page) comes from our API, but if you click on of the articles, they still fetching the content from 'jsonplaceholder', so we need to change it.
6) For that, go to the index.js inside 'articles/[id]' and 
do some changes  to the getStaticPaths() & getStaticProps(), so they can fetch from our API.
7) import 'server'
import { server } from "../config";
8) change the fetch() for getStaticProps() from --->
fetch(
   ...`https://jsonplaceholder.typicode.com/posts/${context.params.id}`
  )
to this ---->
 const res = await fetch(`${server}/api/articles/${context.params.id}`);
9)change the fetch() for getStaticPaths() from --->
...fetch(`https://jsonplaceholder.typicode.com/posts/`);
to this   --->
 const res = await fetch(`${server}/api/articles`);
Now all of our content have been fetching from our API.
that's it here..

---------Custom META--------
if we want to have a custom meta tags and stuff like that, we have import 'Head' on every page OR we can have a default meta component to put in our layout(or you can use 3-d paty package like 'next-seo'). 
1) create a Meta.js in the 'components' folder, inside import 'Head' from 'next/head'
2)We want the Meta funtion will take some  params, like  -->
function Meta({title, keywords, desciption}){...}
3) the function returns a <Head> and add some default props to it. see Meta.js for example.
4) lets bring it inside our Layout.js and we wanna put it right above our <Nav />
5) then, in our home page delete the <Head>, now its from comes the <Layout> component.
6) same thing in about page, delete <Head>
Now on every page we have the default title.
title: "WebDev Newz",
7) And if we want to different title for page, then we can import <Meta> component to that page file, and put it inside return and pass in the title and set it to your title name for this page, same with other two props(description & keywords) expamle. --->
<Meta title='About'/>
now you'll see different titles for the home page and about page, even though it's in Layout it's not gonna repeat twice, can look dev toll for the elements structure, there is  only one meta tag. The meta data comes from LAyout, only if you don't pass any other values for these three props.
8)  If we want to article title for a single article have as the page title. 
---go to the index.js inside [id] folder. import <Meta>.
then, add inside the return --->
<Meta title={article.title} description={article.excerpt} />

now we have our dynamic title and desciption content for each article. WHICH IS GOOD FOR SEO :)
THAT'S IT.