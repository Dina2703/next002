npm run dev      //runs the app on localhost 3000

* public -- folder (for images and stylesheet, etc) is your static folder, means anything you put here  is going to be directly accesible from the browser.

* styles -- there is a so many different ways to write CSS in Next.
  -- global.scc   - for entire app. IMPORTANT!!! You CAN'T import global stylesheet directly into components, only with .module.css extention css files.
  --Home.modules.css  -- this CSS rules applies only to the Home page.
  ** That's the recommended way, to have a specific CSS file for your different components or pages, and import them into the page belongs the CSS.

* index.js   -- inside the 'pages' folder is our Home page.
import Head from "next/head";   // this is usaed dor custom titles or meta tags, keywords, descriptions things like that.

*  -app.js    -- this is the file where all you pages components wrapped. And where you have imported global styles. Here you can import and use Layout, Navbar, Footer components, that you want to have for every page.and these components have tpo wrap children/ or page components(as the about, contant pages)

for all your components that are not pages(like Layout, Footer, Navbar ect), you can create a folder named 'components'
inside the root project folder.

RECOMMENDED to use uppercase for components name file, for pages lowercase name file.

In the Next the cool thing is you don't need a 3-party router , and define routes. You simple put your pages inside the 'pages' folder.
the Next is very good for SEO(search engine) crawlers, because the app with Next will display every element with its content in the source code, which with React created app you are not gonna see the source code, there is only one, element with 'root' id.

**  import styles from '../styles/Layout.modules.css'     
// to apply the stylesheet for specific component import it.


**  import Link from "next/link";
//takes href='/' prop where you show route path for the page you want to link.

** Conditional style with JSX : 
export default function Header() {
  const x = 2;
   return(
     ...
     <div className='title'>...</div>
      <style jsx>
        {`
          .title {
            color: ${x > 3 ? "red" : "green"};
          }
        `}
      </style>
      ...
   );

**  To add a lang attribute to HTML tag, we can create a custom document.
A custom Document can update the <html> and <body> tags used to render a Page. This file is only rendered on the server, so event handlers like onClick cannot be used in _document.

To override the default Document, create the file pages/_document.js as shown below:

import { Html, Head, Main, NextScript } from 'next/document'   /import 


copy and pass below code to the _document.js 

export default function Document() {
  return (
    <Html>
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}

then, can add <Html lang="en"> like so, so you can pass attributes in as props to html if you need to. BUT better adding via  <meta> tag within the <Head> component in index.js.
example:
<meta name="keywords" content="web development, programming " />

_________-Data Fetching_____________
there are some special functions that we can use to fetch data and then pass it into our page as props. We will work on index.js our home page for that, since it's the root component. we need to add these functions above or below the component.

### There are 3 separate methods we can use to fetch data:

1. getStaticProps()   which is going to allow us to fetch it build-time;
2. getServerSideProps()  where we can fetch the data on every request, which is little slower;
3. getStaticPaths()   to dynamically generate path pased on the data we're fetching.

we gonna use getStaticProps().
** the one way to fetch API from a 3-d party api, called Jsonplaceholder.
** the second way fetch API fom local, create own api routes in the api file.

-------fetching data from Jsonplaceholder-----------
https://jsonplaceholder.typicode.com/posts_limit=6 
'_limit=6' -- this things at the end of the endpoint is for defining the limit for the blogs number, we need only 6 blogs
the cool thing how  getStaticProps() works, we can return an object with props which is an object and then whatever we want to pass in  as props, in our case it's articleswe fetch.
like: 
export const getStaticProps = async () => {
  const res = await fetch("https://jsonplaceholder.typicode.com/posts?_limit=6");
  const articles = await res.json();
  return {
    props: {
      articles,
    },
  };
};

then pass the props to the component and use it, like: 
export default function Home({ articles }) {...}

**   <Link href="/article/[id]" as={`/article/${article.id}`}>  we used in the <ArticleItem> component to set the link fro each individual id path by the id of item
this '&rarr;' elements to insert -> the arrow faced to the right, it's inside the <ArticleItem>

** How to display the id number as <ArticleItem> content.
example: 
import { useRouter } from "next/router";

function Article() {
  const router = useRouter();
  const { id } = router.query;
  return <div>This is an article {id}</div>;
}
export default Article;


